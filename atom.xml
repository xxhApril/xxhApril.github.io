<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://xxhapril.github.io</id>
    <title>风和向日葵</title>
    <link href="http://xxhapril.github.io" />
    <updated>2022-09-08T00:00:00.000Z</updated>
    <category term="面试" />
    <category term="iOS" />
    <category term="隐私政策" />
    <category term="用户隐私" />
    <entry>
        <id>http://xxhapril.github.io/2022/09/08/%E9%9A%90%E7%A7%81%E6%94%BF%E7%AD%96/</id>
        <title>隐私协议</title>
        <link rel="alternate" href="http://xxhapril.github.io/2022/09/08/%E9%9A%90%E7%A7%81%E6%94%BF%E7%AD%96/"/>
        <content type="html">&lt;h3 id=&#34;本应用隐私保护协议&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#本应用隐私保护协议&#34;&gt;#&lt;/a&gt; 本应用隐私保护协议&lt;/h3&gt;
&lt;p&gt;本应用尊重并保护所有使用本应用网络服务的个人的隐私。本隐私权政策（以下称 &amp;quot;隐私权政策&amp;quot;）规定，未事先得到您的同意，我们不会有意将涉及您个人隐私的内容透露给任何第三方，但本政策另有说明的除外。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h4 id=&#34;1-我们需要哪些访问权限&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-我们需要哪些访问权限&#34;&gt;#&lt;/a&gt; 1. 我们需要哪些访问权限&lt;/h4&gt;
&lt;p&gt;(1) 访问网络权限&lt;br&gt;
 (2) 访问相册权限&lt;/p&gt;
&lt;h4 id=&#34;2-为什么我们需要这些访问权限&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-为什么我们需要这些访问权限&#34;&gt;#&lt;/a&gt; 2. 为什么我们需要这些访问权限&lt;/h4&gt;
&lt;p&gt;(1) 访问网络权限 - 我们提供在线画报，需要从网络上获取画报列表和图片，所以需要访问网络权限&lt;br&gt;
 (2) 访问相册权限 - 我们提供保存图片到相册功能，所以需要访问相册权限&lt;/p&gt;
&lt;h4 id=&#34;3-本应用和ip设备等信息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-本应用和ip设备等信息&#34;&gt;#&lt;/a&gt; 3. 本应用和 IP，设备等信息&lt;/h4&gt;
&lt;p&gt;在您首次访问本应用后，本应用会对服务器发送网络请求。请求中会携带您设备的 IP，IP 地址是指互联网协议地址（英语：Internet Protocol Address，又译为网际协议地址），是 IP Address 的缩写。 IP 地址是 IP 协议提供的一种统一的地址格式，它为互联网上的每一个网络和每一台主机分配一个逻辑地址，以此来屏蔽物理地址的差异。用于标识不同的访问用户。本应用使用 cookie 来提高我们的服务质量并更多地了解用户群体。IP 所承载您的个人信息均视为您个人隐私，本应用将依照用户隐私政策进行保护。&lt;/p&gt;
&lt;h4 id=&#34;4-我们收集哪些信息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-我们收集哪些信息&#34;&gt;#&lt;/a&gt; 4. 我们收集哪些信息？&lt;/h4&gt;
&lt;p&gt;(1) 我们可能会搜集使用脸部轮廓信息。 用户在使用人像抠图，人物动漫化，人物变老，男变女，女变男，人物动漫化功能时，上传的图片中如果包含人脸信息，我们会在处理过程中使用这些人脸的脸部轮廓信息，用于人工智能算法的处理。我们不存储，不共享这些脸部轮廓信息。处理完成后的图片，因为需要提供下载结果服务，会在服务器存储 24 小时，24 小时候会定时清除。&lt;br&gt;
(2) 本应用不收集有关您的任何特定信息，除非您特意提供了此类信息或者您已经同意我们收集此类信息。本应用所记录和保存的信息包括：时间、手机设备类型、应用语言和用户 IP 地址等。这些信息用于核实我们的记录并向用户提供更适合需要的服务。&lt;/p&gt;
&lt;h4 id=&#34;5-本应用隐私政策的具体内容&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5-本应用隐私政策的具体内容&#34;&gt;#&lt;/a&gt; 5. 本应用隐私政策的具体内容&lt;/h4&gt;
&lt;p&gt;保护用户隐私是本应用的一项基本政策，本应用保证不对外公开或向第三方提供您的申请资料及您在使用网络服务时存储在本应用的个人信息，但下列情况除外：&lt;/p&gt;
&lt;p&gt;(a) 事先获得用户的明确授权；&lt;br&gt;
(b) 根据有关的法律法规要求；&lt;br&gt;
© 按照相关政府主管部门的要求；&lt;br&gt;
(d) 为维护社会公众的利益；&lt;br&gt;
(e) 为维护本应用的合法权益。&lt;/p&gt;
&lt;p&gt;本应用可能会与第三方合作向您提供相关的网络服务，在此情况下，如该第三方同意承担与本应用同等的保护用户隐私的责任，则本应用可将您的个人信息等提供给该第三方。在不透露您隐私资料的前提下，本应用有权对整个用户数据库进行分析并对用户数据库进行商业上的利用（包括但不限于公布、分析或以其它方式使用用户访问量、访问时段、用户偏好等用户数据信息）。&lt;/p&gt;
&lt;h4 id=&#34;6-对隐私权政策的认同和修订&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6-对隐私权政策的认同和修订&#34;&gt;#&lt;/a&gt; 6. 对隐私权政策的认同和修订&lt;/h4&gt;
&lt;p&gt;您在使用本应用网络服务，即表示您同意我们收集并使用您的资料（如本政策所述），并表示您认同我们的网络服务使用协议。本应用保留修改此隐私权政策的权力。如果您不同意本应用修改的内容，您可以主动退出应用，不使用本应用提供的服务。如果您在修改内容公告后 15 天内未主动取消服务，则视为接受本政策的变更；修改内容公告后您如果仍继续使用本应用提供的产品和服务亦构成对本政策变更的接受。&lt;/p&gt;
</content>
        <category term="隐私政策" />
        <category term="用户隐私" />
        <updated>2022-09-08T00:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://xxhapril.github.io/2022/09/07/%E3%80%8AiOS%E9%9D%A2%E8%AF%95%E4%B9%8B%E9%81%93%E3%80%8B%E4%B8%A4%E7%AF%87%E6%80%BB%E7%BB%93%E4%B9%8B%E4%B8%80%EF%BC%9A%E4%B8%93%E4%B8%9A%E9%97%AE%E7%AD%94%E7%AF%87/</id>
        <title>《iOS面试之道》两篇总结之一：开发技能篇</title>
        <link rel="alternate" href="http://xxhapril.github.io/2022/09/07/%E3%80%8AiOS%E9%9D%A2%E8%AF%95%E4%B9%8B%E9%81%93%E3%80%8B%E4%B8%A4%E7%AF%87%E6%80%BB%E7%BB%93%E4%B9%8B%E4%B8%80%EF%BC%9A%E4%B8%93%E4%B8%9A%E9%97%AE%E7%AD%94%E7%AF%87/"/>
        <content type="html">&lt;p&gt;《iOS 面试之道》是故胤道长和唐巧 2018 年合著的针对面试一些问题的书，买之后虽有翻阅，但是始终未认真通读。现在想把书中对于我来说有价值的知识点，简短的总结一下。这里分两篇来说，算法基础放到下篇吧。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;&lt;a href=&#34;&#34;&gt;《iOS 面试之道》两篇总结之一：开发技能篇&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;&#34;&gt;《iOS 面试之道》两篇总结之二：算法基础篇&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;语言工具&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#语言工具&#34;&gt;#&lt;/a&gt; 语言工具&lt;/h2&gt;
&lt;h3 id=&#34;swfit&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#swfit&#34;&gt;#&lt;/a&gt; Swfit&lt;/h3&gt;
&lt;h4 id=&#34;swift-面试理论题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#swift-面试理论题&#34;&gt;#&lt;/a&gt; Swift 面试理论题&lt;/h4&gt;
&lt;h5 id=&#34;类class和结构体struct有什么区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#类class和结构体struct有什么区别&#34;&gt;#&lt;/a&gt; 类（Class）和结构体（struct）有什么区别&lt;/h5&gt;
&lt;p&gt;在 Swift 中，class 是引用类型，struct 是值类型。值类型在传递和赋值时进行复制，引用类型则只会引用对象的一个 “指向”。其实，两个的区别，也是 class、struct 两种类型的区别。&lt;/p&gt;
&lt;p&gt;在内存中，引用类型，诸如类，是在堆（Heap）上进行存储和操作的；而值类型，诸如结构体，是在栈上进行存储和操作的。相比栈上操作，堆上操作更加耗时和复杂，所以，苹果公司也推荐使用结构体，可以提高 App 的运行效率。&lt;/p&gt;
&lt;p&gt;class 的如下功能是 struct 没有的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以继承，这样子类可用父类的特性和方法。&lt;/li&gt;
&lt;li&gt;类型转化可以在运行时检查和解释一个实例的类型。&lt;/li&gt;
&lt;li&gt;可以用 deinit 来释放资源。&lt;/li&gt;
&lt;li&gt;一个类可以被多次引用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;struct 也有如下优势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;结构较小，适用于复制操作，相比一个 class 被多次引用，struct 更加安全。&lt;/li&gt;
&lt;li&gt;无需担心内存泄漏或者多线程冲突问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;swift-是面向对象还是函数式编程语言&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#swift-是面向对象还是函数式编程语言&#34;&gt;#&lt;/a&gt; Swift 是面向对象还是函数式编程语言&lt;/h5&gt;
&lt;p&gt;Swift 即是面向对象的编程语言，也是函数式的编程语言。&lt;/p&gt;
&lt;p&gt;说 Swift 是面向对象的语言，因为 Swift 支持类的封装、继承和多态，从这点来说，Swift 和 Java 这类纯面向对象的编程语言几乎毫无差别。&lt;/p&gt;
&lt;p&gt;说 Swift 是函数式的编程语言，是因为 Swift 支持 map、reduce、filter、flatmap 这类去除中间状态、数学函数式的方法，更加强调运算结果而不是中间过程。&lt;/p&gt;
&lt;h5 id=&#34;在-swift-中什么是可选型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#在-swift-中什么是可选型&#34;&gt;#&lt;/a&gt; 在 Swift 中，什么是可选型&lt;/h5&gt;
&lt;p&gt;在 Swift 中，可选型是为了表达一个变量值为空的情况。无论变量时值类型，还是引用类型，都可以是可选变量。&lt;/p&gt;
&lt;p&gt;在 Objective-C 中没有明确提出可选型的概念，而引用类型可以为 nil，来标识其变量值为空的情况。值类型并不可以。&lt;/p&gt;
&lt;h5 id=&#34;在-swift-中什么是泛型generics&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#在-swift-中什么是泛型generics&#34;&gt;#&lt;/a&gt; 在 Swift 中，什么是泛型（Generics）&lt;/h5&gt;
&lt;p&gt;在 Swift 中，泛型是为增加代码的灵活性而生的：它可以使对应的代码满足任意类型的变量或方法。&lt;/p&gt;
&lt;h5 id=&#34;说明并比较关键词openpublicinternalfileprivate-和-private&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#说明并比较关键词openpublicinternalfileprivate-和-private&#34;&gt;#&lt;/a&gt; 说明并比较关键词：open,public,internal,fileprivate 和 private&lt;/h5&gt;
&lt;p&gt;访问级别从高到低依次为：open &amp;gt; public &amp;gt; internal &amp;gt; fileprivate &amp;gt; private。&lt;/p&gt;
&lt;p&gt;它们遵循的基本原则是：高级别的变量不允许被定义为低级别变量的成员变量，反之可以。&lt;/p&gt;
&lt;p&gt;public 与 open 的唯一区别在于：它修饰的对象可以在任意 Module 中被访问，但不能重写。&lt;/p&gt;
&lt;h5 id=&#34;说明并比较关键词strong-weak-和-unowned&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#说明并比较关键词strong-weak-和-unowned&#34;&gt;#&lt;/a&gt; 说明并比较关键词：strong, weak 和 unowned&lt;/h5&gt;
&lt;p&gt;Swift 的管理机制与 OC 一样都是 ARC。&lt;/p&gt;
&lt;p&gt;unowned 与 weak 本质是一样的，唯一不同的是：对象被释放后，仍然有一个无效的引用指向对象。它不是 Optional，也不指向 nil。如果继续访问，则会引起崩溃。&lt;/p&gt;
&lt;p&gt;weak 与 unowned 都可以用来解决循环引用。但是更推荐使用 weak，防止意外引发崩溃。&lt;/p&gt;
&lt;h5 id=&#34;在-swift-中如何理解-copy-on-write&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#在-swift-中如何理解-copy-on-write&#34;&gt;#&lt;/a&gt; 在 Swift 中，如何理解 copy-on-write&lt;/h5&gt;
&lt;p&gt;当值类型在复制时，复制的对象和原对象实质上在内存中指向同一个对象。当且仅当修改复制的对象时，才会在内存中创建一个新的对象。因此可使得值类型被多次复制而无需耗费太多的内存，只有变化时才会增加开销，使内存的使用更加高效。&lt;/p&gt;
&lt;p&gt;另外，可通过下面方式简单查看对象内存地址：&lt;/p&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; arrA &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;arrA 地址：&amp;quot;&lt;/span&gt;, &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt;(format: &lt;span class=&#34;string&#34;&gt;&amp;quot;%p&amp;quot;&lt;/span&gt;, arrA));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;值类型每次操作后，如赋值、修改等，其内存地址都会改变。&lt;/p&gt;
&lt;h5 id=&#34;什么是属性观察property-observer&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么是属性观察property-observer&#34;&gt;#&lt;/a&gt; 什么是属性观察（Property Observer）&lt;/h5&gt;
&lt;p&gt;在 Swift 中，属性观察器，即 didSet 和 willSet。&lt;/p&gt;
&lt;p&gt;初始化方法的设定、以及在 willSet、didSet 中对属性的再次设定、属性销毁时，都不会触发调用属性观察。&lt;/p&gt;
&lt;h4 id=&#34;swift-面试实战题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#swift-面试实战题&#34;&gt;#&lt;/a&gt; Swift 面试实战题&lt;/h4&gt;
&lt;h5 id=&#34;在结构体中如何修改成员变量&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#在结构体中如何修改成员变量&#34;&gt;#&lt;/a&gt; 在结构体中如何修改成员变量&lt;/h5&gt;
&lt;p&gt;使用 mutating 关键字。&lt;/p&gt;
&lt;p&gt;另外，如果设计协议时，协议需要被值类型实现，则需要考虑是否给协议方法或者属性添加关键字 mutating。&lt;/p&gt;
&lt;h5 id=&#34;在-swift-中如何实现或操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#在-swift-中如何实现或操作&#34;&gt;#&lt;/a&gt; 在 Swift 中如何实现或（||）操作&lt;/h5&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;||&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;left&lt;/span&gt;: &lt;span class=&#34;type&#34;&gt;Bool&lt;/span&gt;, &lt;span class=&#34;params&#34;&gt;right&lt;/span&gt;: &lt;span class=&#34;keyword&#34;&gt;@autoclosure&lt;/span&gt; () -&amp;gt; &lt;span class=&#34;type&#34;&gt;Bool&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;type&#34;&gt;Bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; left &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; right()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;只有左侧为假时，才计算右侧，防止不必要的计算开销。&lt;/p&gt;
&lt;h5 id=&#34;实现一个函数输入任意一个整数输出为输入的整数2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#实现一个函数输入任意一个整数输出为输入的整数2&#34;&gt;#&lt;/a&gt; 实现一个函数：输入任意一个整数，输出为输入的整数 + 2&lt;/h5&gt;
&lt;p&gt;这个函数主要考察柯里化。Swift 的柯里化特性是函数式编程思想的体现。&lt;/p&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;add&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;num&lt;/span&gt;: &lt;span class=&#34;type&#34;&gt;Int&lt;/span&gt;) -&amp;gt;(&lt;span class=&#34;type&#34;&gt;Int&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;type&#34;&gt;Int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123; val &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; num &lt;span class=&#34;operator&#34;&gt;+&lt;/span&gt; val&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;实现一个函数求-0-~-100包括-0-和-100中为偶数并且恰好是其他数字平方的数字&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#实现一个函数求-0-~-100包括-0-和-100中为偶数并且恰好是其他数字平方的数字&#34;&gt;#&lt;/a&gt; 实现一个函数：求 0 ~ 100（包括 0 和 100）中为偶数并且恰好是其他数字平方的数字&lt;/h5&gt;
&lt;p&gt;考察函数式编程思想。如下：&lt;/p&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; arr &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; (&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;).map &amp;#123; &lt;span class=&#34;variable&#34;&gt;$0&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$0&lt;/span&gt; &amp;#125;.filter &amp;#123; &lt;span class=&#34;variable&#34;&gt;$0&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;objective-c&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#objective-c&#34;&gt;#&lt;/a&gt; Objective-C&lt;/h3&gt;
&lt;h4 id=&#34;objective-c-面试理论题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#objective-c-面试理论题&#34;&gt;#&lt;/a&gt; Objective-C 面试理论题&lt;/h4&gt;
&lt;h5 id=&#34;什么是-arc&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么是-arc&#34;&gt;#&lt;/a&gt; 什么是 ARC&lt;/h5&gt;
&lt;p&gt;自动引用计数，更多详细信息可看：&lt;a href=&#34;http://xxhsu.com/2019/11/29/%E3%80%8AObjective-C%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E3%80%8B%E4%B8%89%E7%AF%87%E6%80%BB%E7%BB%93%E4%B9%8B%E4%B8%80%EF%BC%9A%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0%E7%AF%87/&#34;&gt;《Objective-C 高级编程》三篇总结之一：引用计数篇&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;什么情况下会出现循环引用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么情况下会出现循环引用&#34;&gt;#&lt;/a&gt; 什么情况下会出现循环引用&lt;/h5&gt;
&lt;p&gt;多个对象相互强引用，导致无法释放，造成内存泄漏。&lt;/p&gt;
&lt;p&gt;可使用 weak 或者 __block 来解决循环引用。&lt;/p&gt;
&lt;p&gt;Xcode 中的 Debug Memory Graph 可检查内存泄漏。&lt;/p&gt;
&lt;h5 id=&#34;说明并比较关键字strong-weak-assign-和-copy&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#说明并比较关键字strong-weak-assign-和-copy&#34;&gt;#&lt;/a&gt; 说明并比较关键字：strong, weak, assign 和 copy&lt;/h5&gt;
&lt;p&gt;在上面那篇文章中有过详细说明。这里再补充几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;weak 一般用来修饰对象，assign 用来修饰基本数据类型。因为 assign 修饰的对象被释放后，指针地址依然存在，造成 “野指针”，在堆上容易造成崩溃。而栈上的内存系统会自动处理，不会造成 “野指针”。&lt;/li&gt;
&lt;li&gt;在 Objective-C 中，基本数据类型的默认关键字是 atomic、readwrite 和 assign；普通属性的默认关键字是 atomic、readwrite 和 strong。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;说明并比较关键字atomic-和-nonatomic&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#说明并比较关键字atomic-和-nonatomic&#34;&gt;#&lt;/a&gt; 说明并比较关键字：atomic 和 nonatomic&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;atomic 修饰的对象会保证 getter 和 setter 的完整性，任何线程访问它都可以得到一个完整的初始化对象，因为要保证操作完成，所以速度比较慢。atomic 比 nonatomic 安全，但也不是绝对的线程安全，例如多个线程同时调用 get 和 set 时，就会导致获得的对象值不一致。想要线程绝对安全，就要用 @synthesize。&lt;/li&gt;
&lt;li&gt;nonatomic 修饰的对象不保证 getter 和 setter 的完整性，所以当多个线程访问它时，它可能返回未初始化的对象。正因为如此，nonatomic 比 atomic 速度快，但是线程也是不安全的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;说明并比较关键字property-synthesize-dynamic&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#说明并比较关键字property-synthesize-dynamic&#34;&gt;#&lt;/a&gt; 说明并比较关键字：@property, @synthesize, @dynamic&lt;/h5&gt;
&lt;p&gt;参考： &lt;a href=&#34;https://www.jianshu.com/p/0695ecbe9e06&#34;&gt;iOS - @property 与 @synthesize 与 @dynamic&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上面文章说的非常详细，这里我只做个简单总结。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;@property:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;@property 是声明属性的语法。被 @property 声明的属性，系统已经自动生成了实例变量，即下划线变量。&lt;/li&gt;
&lt;li&gt;如果对 @property 声明的属性单独重写了 setter 或者 getter 方法，都可以使用该属性的实例变量。一旦同时重写了 setter 和 getter 方法，再使用实例变量时就会报错，此时需要使用 @synthesize。如下： &lt;figure class=&#34;highlight objc&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;@interface&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ViewController&lt;/span&gt; ()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;@property&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;nonatomic&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;copy&lt;/span&gt;) &lt;span class=&#34;built_in&#34;&gt;NSString&lt;/span&gt; *name;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;@implementation&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ViewController&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;@synthesize&lt;/span&gt; name = _name;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;- (&lt;span class=&#34;built_in&#34;&gt;NSString&lt;/span&gt; *)name &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (_name == &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; _name;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;- (&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt;)setName:(&lt;span class=&#34;built_in&#34;&gt;NSString&lt;/span&gt; *)name &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    _name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;@synthesize:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;@synthesize 为属性添加一个实例变量名，或者说别名。同时会为该属性生成默认的 setter 和 getter 方法。&lt;/li&gt;
&lt;li&gt;如果属性手动已经实现了自己的 setter 和 getter 方法，可以使用 @dynamic 来阻止 @synthesize 自动生成的 setter/getter 覆盖。&lt;/li&gt;
&lt;li&gt;当在协议 Protocol 中声明属性时，协议中声明的属性不会自动生成 setter 和 getter，需要使用 @synthesize 生成 getter 和 setter。&lt;/li&gt;
&lt;li&gt;@property 声明的属性有两个对应的词，一个是 @synthesize，一个是 @dynamic。如果 @synthesize 和 @dynamic 都没写，默认是 @synthesize var = _var;&lt;/li&gt;
&lt;li&gt;如果我们同时写了 getter 和 setter 方法，就需要在 .m 文件中使用 @synthesize。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;@dynamic:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;@dynamic 告诉编译器：该属性的 setter 和 getter 方法已由用户自己实现，不自动生成。&lt;/li&gt;
&lt;li&gt;加入一个属性被 @dynamic 修饰，但是开发者并没有提供 setter 和 getter 方法，编译时候没有问题，一旦在运行过程中，访问到该属性、或者修改该属性时，都会因为缺少 setter 或者 getter 方法而引发崩溃。&lt;/li&gt;
&lt;li&gt;编译时没问题，运行时才执行相应的方法，这就是所谓的动态绑定。&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;runloop-和线程有什么关系&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#runloop-和线程有什么关系&#34;&gt;#&lt;/a&gt; RunLoop 和线程有什么关系&lt;/h5&gt;
&lt;p&gt;详细可参考：&lt;a href=&#34;https://www.jianshu.com/p/a8fc0dd66cbb&#34;&gt;Runloop 分析&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;RunLoop 是每一个线程一直运行的一个对象，它主要用来负责响应需要处理的各种事件和消息。每个线程都有且仅有一个 RunLoop 与其对应，没有线程，就没有 RunLoop。&lt;/p&gt;
&lt;p&gt;在所有线程中，只有主线程的 RunLoop 是默认启动的，main 函数会设置一个 NSRunLoop 对象。而其他线程的 RunLoop 是默认没有启动的，可以通过  &lt;code&gt; [NSRunLoop currentRunLoop]&lt;/code&gt;  来启动。&lt;/p&gt;
&lt;h5 id=&#34;说明并比较关键词__weak-和-__block&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#说明并比较关键词__weak-和-__block&#34;&gt;#&lt;/a&gt; 说明并比较关键词：__weak 和 __block&lt;/h5&gt;
&lt;p&gt;详细可参考：&lt;a href=&#34;https://www.jianshu.com/p/e42f86a81045&#34;&gt;《Objective-C 高级编程》三篇总结之二：Block 篇&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;__weak 与 weak 基本相同，前者修饰变量，后者修饰属性。__weak 主要用于防止 Block 中的循环引用。&lt;/li&gt;
&lt;li&gt;__block 也用于修饰变量。它是引用修饰，所以其修饰的值是动态变化的，可以被重新赋值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;什么是block它和代理的区别是什么&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么是block它和代理的区别是什么&#34;&gt;#&lt;/a&gt; 什么是 Block？它和代理的区别是什么&lt;/h5&gt;
&lt;p&gt;Block 是带有自动变量的匿名函数。详细可参考 &lt;a href=&#34;https://www.jianshu.com/p/e42f86a81045&#34;&gt;《Objective-C 高级编程》三篇总结之二：Block 篇&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这里再简单总结下它们的主要区别：&lt;/p&gt;
&lt;p&gt;Block 和代理的首要区别在于 Block 集中代码块，而代理分散代码块。所以 Block 更适合轻便、简单的回调。如网络传输。而代理适用公共接口较多的情况。这样做也更易于解耦代码结构。&lt;/p&gt;
&lt;p&gt;两者的另一个区别在于，Block 运行成本高。Block 出栈时，需要将使用的数据从栈内存复制到堆内存，如果是对象，则引用计数 +1，使用完或者 Block 置为 nil 后才消除。delegate 只是保留了一个对象指针，直接回调，并没有额外消耗。并且 Block 更易造成循环引用。&lt;/p&gt;
&lt;h4 id=&#34;objective-c-面试实战题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#objective-c-面试实战题&#34;&gt;#&lt;/a&gt; Objective-C 面试实战题&lt;/h4&gt;
&lt;h5 id=&#34;属性声明代码风格考查&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#属性声明代码风格考查&#34;&gt;#&lt;/a&gt; 属性声明代码风格考查&lt;/h5&gt;
&lt;p&gt;具有 mutable 的对象应该用 copy 修饰，防止被动态修改。应该多用 NSInteger、CGFloat 等。&lt;/p&gt;
&lt;p&gt;另外，如果可变类型如 NSMutableString 用 copy 修饰，那么对其修改时，程序会崩溃，报错：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[NSTaggedPointerString appendString:]: unrecognized selector sent to instance 0x824f62a252296794&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;架构解耦代码考查&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#架构解耦代码考查&#34;&gt;#&lt;/a&gt; 架构解耦代码考查&lt;/h5&gt;
&lt;p&gt;OC 的 enum 应该带有 全名 + case 名，方便与 Swift 混编，如 SexBoy。&lt;/p&gt;
&lt;p&gt;Model 应与 View 划清界限。&lt;/p&gt;
&lt;h5 id=&#34;内存管理语法考查&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#内存管理语法考查&#34;&gt;#&lt;/a&gt; 内存管理语法考查&lt;/h5&gt;
&lt;figure class=&#34;highlight objc&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;NSString&lt;/span&gt; *fir = &lt;span class=&#34;string&#34;&gt;@&amp;quot;Hello&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;NSString&lt;/span&gt; *sec = &lt;span class=&#34;string&#34;&gt;@&amp;quot;Hello&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;NSLog&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;@&amp;quot;fir 内存地址：%p   sec 内存地址：%p&amp;quot;&lt;/span&gt;, fir,sec);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (fir == sec) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;NSLog&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;@&amp;quot;fir == sec&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;NSLog&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;@&amp;quot;fir != sec&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ([fir isEqualToString:sec]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;NSLog&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;@&amp;quot;[fir isEqualToString:sec] == YES&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;NSLog&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;@&amp;quot;[fir isEqualToString:sec] == NO&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;figure class=&#34;highlight objc&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2019&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;-12&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;-25&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;46&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;44.336661&lt;/span&gt;+&lt;span class=&#34;number&#34;&gt;0800&lt;/span&gt; GCD[&lt;span class=&#34;number&#34;&gt;58834&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;2265032&lt;/span&gt;] fir 内存地址：&lt;span class=&#34;number&#34;&gt;0x108ddc2c8&lt;/span&gt;   sec 内存地址：&lt;span class=&#34;number&#34;&gt;0x108ddc2c8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2019&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;-12&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;-25&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;46&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;44.337619&lt;/span&gt;+&lt;span class=&#34;number&#34;&gt;0800&lt;/span&gt; GCD[&lt;span class=&#34;number&#34;&gt;58834&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;2265032&lt;/span&gt;] fir == sec&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2019&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;-12&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;-25&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;46&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;44.348583&lt;/span&gt;+&lt;span class=&#34;number&#34;&gt;0800&lt;/span&gt; GCD[&lt;span class=&#34;number&#34;&gt;58834&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;2265032&lt;/span&gt;] [fir isEqualToString:sec] == &lt;span class=&#34;literal&#34;&gt;YES&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;内存地址相同。字符串存在数据区。&lt;/p&gt;
&lt;h5 id=&#34;多线程语法考查&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#多线程语法考查&#34;&gt;#&lt;/a&gt; 多线程语法考查&lt;/h5&gt;
&lt;p&gt;视图刷新放到主线程。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;吐槽一下，这本书对于这些知识点说明的真的是简单到令人发指啊！！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;runloop-timer&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#runloop-timer&#34;&gt;#&lt;/a&gt; RunLoop Timer&lt;/h5&gt;
&lt;p&gt;滑动时，ScrollView 视图上的 timer 停止，这里有两种方案解决：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将 timer 加到 NSRunLoopCommonModes 中。&lt;/li&gt;
&lt;li&gt;将 timer 放到另一个线程中，并开启另一个线程的 RunLoop。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;示例如下：&lt;/p&gt;
&lt;figure class=&#34;highlight objc&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 方法1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[[&lt;span class=&#34;built_in&#34;&gt;NSRunLoop&lt;/span&gt; currentRunLoop] addTimer:timer forMode:&lt;span class=&#34;built_in&#34;&gt;NSRunLoopCommonModes&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 方法2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;dispatch_async&lt;/span&gt;(dispatch_get_global_queue(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;), ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    timer = [&lt;span class=&#34;built_in&#34;&gt;NSTimer&lt;/span&gt; scheduledTimerWithTimeInterval:&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; target:&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt; selector:&lt;span class=&#34;keyword&#34;&gt;@selector&lt;/span&gt;(repeat:) userInfo:&lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; repeats:&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;swift-vs-objective-c&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#swift-vs-objective-c&#34;&gt;#&lt;/a&gt; Swift VS Objective-C&lt;/h3&gt;
&lt;p&gt;Swift 是静态类型语言，Objective-C 是动态类型语言。&lt;/p&gt;
&lt;p&gt;这小节从数据结构、编程思路和语言特性三点来作对比。&lt;/p&gt;
&lt;h5 id=&#34;swift-为什么将-string-array-和-dictionary-设计成值类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#swift-为什么将-string-array-和-dictionary-设计成值类型&#34;&gt;#&lt;/a&gt; Swift 为什么将 String、Array 和 Dictionary 设计成值类型&lt;/h5&gt;
&lt;p&gt;首要要知道，在 OC 中，这三个都被设计成了引用类型。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;值类型相比引用类型，最大的优势就是可以高效的使用内存。值类型在栈上操作，引用类型通常在堆上操作。栈上的操作仅仅是单个指针的上下移动，而堆上的操作则牵涉到合并、移位、重新链接等。也就是说，Swift 这么设计大幅度减少了堆上的内存分配和回收的次数。同时，copy-on-write 又将值传递和复制到开销降到最低。&lt;/li&gt;
&lt;li&gt;Swift 将它们设计成值类型也是为了线程安全。通过 Swift 的 let 设置，是得这些数据达到真正意义上的 “不变”，也从根本上解决了多线程众内存访问和操作顺序的问题。&lt;/li&gt;
&lt;li&gt;Swift 将它们设计成值类型可以提高 API 的灵活度。譬如添加协议等，对数据进行操作等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;如何用-swift-将协议-protocol-中部分方法设计成可选-optional&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#如何用-swift-将协议-protocol-中部分方法设计成可选-optional&#34;&gt;#&lt;/a&gt; 如何用 Swift 将协议 Protocol 中部分方法设计成可选 optional&lt;/h5&gt;
&lt;p&gt;一共有两种方案：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在协议和方法前均加上 @objc 关键字，然后在可选方法前加上 optional 关键字。该方案实际上是把协议转化为 OC 的方式，然后进行分可选定义。&lt;/li&gt;
&lt;li&gt;用扩展 extension 来规定可选方法。&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;协议的代码实战&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#协议的代码实战&#34;&gt;#&lt;/a&gt; 协议的代码实战&lt;/h5&gt;
&lt;p&gt;记着一点就行，weak 只能为引用类型提供内存管理。所以协议有时候需要继承自 class。&lt;/p&gt;
&lt;h4 id=&#34;编程思路&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#编程思路&#34;&gt;#&lt;/a&gt; 编程思路&lt;/h4&gt;
&lt;h5 id=&#34;混编时方法如何互调&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#混编时方法如何互调&#34;&gt;#&lt;/a&gt; 混编时，方法如何互调？&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Swift 调用 OC 方法时，使用 bridging 桥接头文件。&lt;/li&gt;
&lt;li&gt;OC 调用 Swift ，则导入 Swift 文件生成的头文件。Swift 文件中对外暴露的属性或方法需加上 @objc 关键字。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;比较-swift-和-objective-c-中初始化方法-init-有什么异同&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#比较-swift-和-objective-c-中初始化方法-init-有什么异同&#34;&gt;#&lt;/a&gt; 比较 Swift 和 Objective-C 中初始化方法 init 有什么异同&lt;/h5&gt;
&lt;p&gt;一言以蔽之，Swift 中初始化方法更加严谨和准确。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 Objective-C 中，初始化方法无法保证所有成员变量都完成初始化；编译器对属性设置并无警告，但是实际操作会出现初始化不完全的情况。初始化方法和普通方法并无差异，可以多次调用。&lt;/li&gt;
&lt;li&gt;在 Swift 中，初始化方法必须保证所有非 optional 的成员变量都完成初始化；同时，新增 convenience 和 required 两个修饰初始化方法的关键词。convenience 只是提供了一种方便的初始化方法（便利构造器），必须通过调用同一个类中的 designated 初始化方法（指定构造器）来完成。required 是强制子类重写父类中所修饰的初始化方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;比较-swift-和-objective-c-中的协议有什么异同&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#比较-swift-和-objective-c-中的协议有什么异同&#34;&gt;#&lt;/a&gt; 比较 Swift 和 Objective-C 中的协议有什么异同&lt;/h5&gt;
&lt;p&gt;相同点：都可以被用作代理。在实际开发中多用于适配器模式（Adapter Pattern）。&lt;/p&gt;
&lt;p&gt;不同点：Swift 中的 protocol 还可以对接口进行抽象，例如 Sequence，配合扩展、泛型、关联类型等实现面向协议编程，从而大大提高代码灵活性。同时，Swift 中的 protocol 还能用于值类型，如结构体和枚举。&lt;/p&gt;
&lt;h4 id=&#34;语言特性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#语言特性&#34;&gt;#&lt;/a&gt; 语言特性&lt;/h4&gt;
&lt;h5 id=&#34;谈谈对-objective-c-和-swift-对动态性的理解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#谈谈对-objective-c-和-swift-对动态性的理解&#34;&gt;#&lt;/a&gt; 谈谈对 Objective-C 和 Swift 对动态性的理解&lt;/h5&gt;
&lt;p&gt;runtime 其实就是 Objective-C 语言的动态机制。runtime 执行的是编译后的代码，这时它可以动态的添加对象、添加方法、修改属性、传递信息等。具体过程是，在 Objective-C 中，对象调用方法时，如  &lt;code&gt;[self.tableview reload];&lt;/code&gt; ，经历了两个阶段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编译阶段：编译器（compiler）会把这句话翻译成  &lt;code&gt;objc_msgSend(self.tableview, @selector(reload)&lt;/code&gt; ，把消息发送给 self.tableview。&lt;/li&gt;
&lt;li&gt;运行阶段：接收者 self.tableview 会响应这个消息，其间可能直接执行、转发消息，也可能找不到方法而导致程序崩溃。崩溃过程以及预防措施，可参考 &lt;a href=&#34;https://www.jianshu.com/p/9856cf221c2b&#34;&gt;iOS：消息转发机制、响应者链、App 启动前后&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以，整个流程是：编译器翻译 -&amp;gt; 给接收者发送消息 -&amp;gt; 接收者响应消息。&lt;/p&gt;
&lt;p&gt;其中，接收者如何响应消息，就发生在运行时（runtime）。runtime 的运行时机制就是 Objective-C 的语言特性。&lt;/p&gt;
&lt;p&gt;Swift 目前被公认为一门静态语言。它的动态特性都是通过桥接 OC 来实现的。&lt;/p&gt;
&lt;h5 id=&#34;语言特性的代码实战&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#语言特性的代码实战&#34;&gt;#&lt;/a&gt; 语言特性的代码实战&lt;/h5&gt;
&lt;p&gt;这里牵扯到协议的派发。通下下面一段代码来说明：&lt;/p&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;protocol&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Chef&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;makeFood&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;extension&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Chef&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;makeFood&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Make Food&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;SeafoodChef&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Chef&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;makeFood&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Cook Seafood&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; chefOne: &lt;span class=&#34;type&#34;&gt;Chef&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;SeafoodChef&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; chefTwo:  &lt;span class=&#34;type&#34;&gt;SeafoodChef&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;SeafoodChef&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;chefOne.makeFood()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;chefTwo.makeFood()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Cook&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Seafood&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Cook&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Seafood&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 Swift 中，协议中是动态派发的，而扩展中则是静态派发的。也就是说，协议中如果有方法声明，那么方法会根据对象的实际类型进行调用。&lt;/p&gt;
&lt;p&gt;如果上述代码中，将协议中  &lt;code&gt;func makeFood()&lt;/code&gt;  方法删除，则输出变为：&lt;/p&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Make&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Food&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Cook&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Seafood&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因为协议中没有声明 makeFood () 方法，所以此时需要按照扩展中的协议静态派发。也就是说，会根据对象的声明类型进行调用，而非实际类型。&lt;/p&gt;
&lt;h5 id=&#34;message-send-如果找不到对象则会如何进行后续处理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#message-send-如果找不到对象则会如何进行后续处理&#34;&gt;#&lt;/a&gt; message send 如果找不到对象，则会如何进行后续处理&lt;/h5&gt;
&lt;p&gt;message send 找不到对象分两种情况：对象为空（nil）；对象不为空，却找不到对应的方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对象为空时，Objective-C 向 nil 发送消息是有效的，在 runtime 中不会产生任何效果。&lt;/li&gt;
&lt;li&gt;对象不为空，却找不到对应的方法时，程序运行异常，引发 unrecognized selector 错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;什么是-method-swizzling&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么是-method-swizzling&#34;&gt;#&lt;/a&gt; 什么是 method swizzling&lt;/h5&gt;
&lt;p&gt;每个类都维护一个方法列表，其中方法名与其实现是一一对应的关系，即 SEL (方法名) 和 IMP (指向实现的指针) 的对应关系。method swizzling 可以在 runtime 期间将 SEL 和 IMP 进行更换。更换时需注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方法交换应该保证唯一性和原子性。唯一性是指应该尽可能的在 +load () 方法中实现，这样可以保证方法一定会被调用且不会异常。原子性是指需要使用 dispatch_once 来执行方法交换，这样可以保证只运行一次。&lt;/li&gt;
&lt;li&gt;不要轻易使用 method swizzling。因为动态交换方法的实现并没有编译器的安全保障，可能会在运行时造成奇怪的问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;swift-和-objective-c-的自省introspection有什么不同&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#swift-和-objective-c-的自省introspection有什么不同&#34;&gt;#&lt;/a&gt; Swift 和 Objective-C 的自省（Introspection）有什么不同&lt;/h5&gt;
&lt;p&gt;自省在 Objective-C 中就是：判断一个对象是否属于某个类的操作、它有以下两种形式：&lt;/p&gt;
&lt;figure class=&#34;highlight objc&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[obj isKindOfClass:[SomeClass &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt;]];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[obj isMemberOfClass:[SomeClass &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt;]];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;isKindOfClass 用来判断 obj 是否是 SomeClass 或其子类。isMemberOfClass 用来判断 obj 是否就是 SomeClass（非子类）的实例对象。这两个方法都有个前提：obj 必须是 NSObject 或其子类。&lt;/p&gt;
&lt;p&gt;在 Swift 中，由于很多类型并非继承自 NSObject，所以通常用 is 函数来进行判断，相当于 isKindOfClass。is 函数可同时用于值类型和引用类型。&lt;/p&gt;
&lt;p&gt;另外，自省通常与动态类型一起使用。动态类型就是 id 类型。&lt;/p&gt;
&lt;h5 id=&#34;能够通过-category-给已有类添加属性-property&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#能够通过-category-给已有类添加属性-property&#34;&gt;#&lt;/a&gt; 能够通过 Category 给已有类添加属性 property&lt;/h5&gt;
&lt;p&gt;不论对 OC 还是 Swift，都可以添加。如：&lt;/p&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; middleKey: &lt;span class=&#34;type&#34;&gt;Void&lt;/span&gt;?&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;extension&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;User&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; middleName: &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt;? &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;get&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; objc_getAssociatedObject(&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;, &lt;span class=&#34;operator&#34;&gt;&amp;amp;&lt;/span&gt;middleKey) &lt;span class=&#34;keyword&#34;&gt;as?&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;set&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            objc_setAssociatedObject(&lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;, &lt;span class=&#34;operator&#34;&gt;&amp;amp;&lt;/span&gt;middleKey, newValue, objc_AssociationPolicy.&lt;span class=&#34;type&#34;&gt;OBJC_ASSOCIATION_COPY_NONATOMIC&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;setter 方法使用 objc_setAssociatedObject，getter 方法使用 objc_getAssociatedObject 即可。&lt;/p&gt;
&lt;h3 id=&#34;xcode-使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#xcode-使用&#34;&gt;#&lt;/a&gt; Xcode 使用&lt;/h3&gt;
&lt;h4 id=&#34;xcode-调试&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#xcode-调试&#34;&gt;#&lt;/a&gt; Xcode 调试&lt;/h4&gt;
&lt;h5 id=&#34;lldb-中-p-和-po-有什么区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#lldb-中-p-和-po-有什么区别&#34;&gt;#&lt;/a&gt; LLDB  中 p 和 po 有什么区别&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;p 是 expr- 的缩写。它的工作是把收到的参数在当前环境下进行编译，然后打印出对应的值。&lt;/li&gt;
&lt;li&gt;po 即 expr-o-。会打印出比 p 更加详细的内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;分析与优化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#分析与优化&#34;&gt;#&lt;/a&gt; 分析与优化&lt;/h4&gt;
&lt;h5 id=&#34;app-启动时间过长该怎样优化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#app-启动时间过长该怎样优化&#34;&gt;#&lt;/a&gt; App 启动时间过长，该怎样优化&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://www.jianshu.com/p/9856cf221c2b&#34;&gt;iOS：消息转发机制、响应者链、App 启动前后&lt;/a&gt;。这篇文章里也说过这个问题。这里只重复说一点：&lt;/p&gt;
&lt;p&gt;通过添加环境变量可以打印出 App 的启动时间分析:&lt;/p&gt;
&lt;p&gt;Edit scheme -&amp;gt; Run -&amp;gt; Arguments -&amp;gt; Environment Variables:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加：DYLD_PRINT_STATISTICS，设置为 1。&lt;/li&gt;
&lt;li&gt;如果需要更详细的信息，那就添加：DYLD_PRINT_STATISTICS_DETAILS，设置为 1。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;如何用-xcode-检测代码中的循环引用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#如何用-xcode-检测代码中的循环引用&#34;&gt;#&lt;/a&gt; 如何用 Xcode 检测代码中的循环引用&lt;/h5&gt;
&lt;p&gt;两种方案：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Xcode 调试工具栏中的 Memory Debug Graph 工具。&lt;/li&gt;
&lt;li&gt;Instruments 里面的 leak，一个专门检测内存泄露的工具。&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;怎样解决-exc_bad_access&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#怎样解决-exc_bad_access&#34;&gt;#&lt;/a&gt; 怎样解决 EXC_BAD_ACCESS&lt;/h5&gt;
&lt;p&gt;产生 EXC_BAD_ACCESS 的主要原因就是访问了已经释放的对象，或者访问他们已经释放了的成员变量或者方法，解决方法主要有以下几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置全局断点，快速定位缺陷所在：这种方法效果一般。&lt;/li&gt;
&lt;li&gt;重写 Object 的 repondsToSelector 方法：这种方法效果一般，并且要在每个 class 进行定点排查，并不推荐。&lt;/li&gt;
&lt;li&gt;使用 Zombie 和 Address Sanitizer: 可以在绝大部分情况下定位到问题代码。开启方式：Edit scheme -&amp;gt; Run -&amp;gt; Diagnostics -&amp;gt; Address Sanitizer 和 Zombie Objects 选项。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;playground-技巧&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#playground-技巧&#34;&gt;#&lt;/a&gt; Playground 技巧&lt;/h4&gt;
&lt;h5 id=&#34;如何在-playground-中执行异步操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#如何在-playground-中执行异步操作&#34;&gt;#&lt;/a&gt; 如何在 Playground 中执行异步操作&lt;/h5&gt;
&lt;p&gt;要让 Playground 具备延时运行的特性，可以在 Playground 文件中加入以下代码:&lt;/p&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; PlaygroundSupport&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;PlaygroundPage&lt;/span&gt;.current.needsIndefiniteException &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;playground-可视化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#playground-可视化&#34;&gt;#&lt;/a&gt; Playground 可视化&lt;/h5&gt;
&lt;p&gt;导入头文件即可:&lt;/p&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; UIKit&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; PlaygroundSupport&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ViewController&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;UIViewConrollwe&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;override&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;viewDidLoad&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;super&lt;/span&gt;.viewDidLoad()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;系统框架&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#系统框架&#34;&gt;#&lt;/a&gt; 系统框架&lt;/h2&gt;
&lt;h3 id=&#34;ui-相关知识&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ui-相关知识&#34;&gt;#&lt;/a&gt; UI 相关知识&lt;/h3&gt;
&lt;h4 id=&#34;ui-控件和基本布局&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ui-控件和基本布局&#34;&gt;#&lt;/a&gt; UI 控件和基本布局&lt;/h4&gt;
&lt;h5 id=&#34;stroyboardxib-和纯代码构建的-ui-相比有哪些优点和缺点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#stroyboardxib-和纯代码构建的-ui-相比有哪些优点和缺点&#34;&gt;#&lt;/a&gt; stroyboard/xib 和纯代码构建的 UI 相比，有哪些优点和缺点&lt;/h5&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简单直接快速。&lt;/li&gt;
&lt;li&gt;跳转关系清除&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多人协作易冲突。&lt;/li&gt;
&lt;li&gt;很难做到界面继承和重用。&lt;/li&gt;
&lt;li&gt;不便进行模块化管理。&lt;/li&gt;
&lt;li&gt;影响性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;PS. 吐个槽，我自己经常用 xib，看到这里的对比，，，自己看着办吧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;auto-layout-和-frame-在-ui-布局和渲染上有什么区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#auto-layout-和-frame-在-ui-布局和渲染上有什么区别&#34;&gt;#&lt;/a&gt; Auto Layout 和 Frame 在 UI 布局和渲染上有什么区别&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Auto Layout 是针对多尺寸屏幕的设计。其本质是通过线性不等式设置 UI 控件的相对位置，从而适配多种屏幕尺寸。&lt;/li&gt;
&lt;li&gt;Frame 是基于 X、Y 坐标轴的布局机制。是开发中最底层、最基本的页面布局。&lt;/li&gt;
&lt;li&gt;Auto Layout 的性能比 Frame 差很多。（其实最近两年 Xcode 升级对这个已经进行过大幅度优化了）。&lt;/li&gt;
&lt;li&gt;优化 Auto Layout 的方案是减少视图层级，减少计算量，缓存计算结果等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;uiview-和-calayer-有什么区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#uiview-和-calayer-有什么区别&#34;&gt;#&lt;/a&gt; UIView 和 CALayer 有什么区别&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;UIView 和 CALayer 都是 UI 操作的对象&lt;/strong&gt;。两者都是 NSObject 的子类，发生在 UIView 上的操作，本质上发生在对应的 CALayer 上。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UIView 是 CALayer 用户交互的对象&lt;/strong&gt;。UIView 是 UIResponder 的子类，其中提供了很多 CALayer 所没有的交互上的接口，主要负责处理用户触发的各种操作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CALayer 在图像和动画渲染上性能更好&lt;/strong&gt;。这是因为 UIView 有冗余的交互接口，而且相比 CALayer，有层级之分。CALayer 无需处理交互时进行渲染，可以节省大量时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;说明比较关键词-framebounds-和-center&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#说明比较关键词-framebounds-和-center&#34;&gt;#&lt;/a&gt; 说明比较关键词： frame，bounds 和 center&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;frame&lt;/strong&gt; 是指当前视图（View）相对于父视图的平面坐标系统中的位置和大小。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;bounds&lt;/strong&gt; 是指当前视图相对于自己的平面坐标系统中的位置和大小。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;center&lt;/strong&gt; 是一个 CGPoint，指当前视图在父视图的平面坐标系统中，中间的位置。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外，frame 和 bounds 的 size 并非一直相等，如下：&lt;/p&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; oneV &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;UIView&lt;/span&gt;(frame: &lt;span class=&#34;type&#34;&gt;CGRect&lt;/span&gt;(x: &lt;span class=&#34;number&#34;&gt;30&lt;/span&gt;, y: &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;, width: &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;, height: &lt;span class=&#34;number&#34;&gt;180&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;oneV.transform3D &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;CATransform3DMakeRotation&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;30&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;oneV.backgroundColor &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;UIColor&lt;/span&gt;.red&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;view.addSubview(oneV)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;oneV frame = &lt;span class=&#34;subst&#34;&gt;\(oneV.frame)&lt;/span&gt;&lt;span class=&#34;subst&#34;&gt;\n&lt;/span&gt;oneV bounds = &lt;span class=&#34;subst&#34;&gt;\(oneV.bounds)&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;oneV frame &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; (&lt;span class=&#34;operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;18.520467338700882&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;136.31870596839138&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;197.04093467740176&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;107.36258806321723&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;oneV bounds &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; (&lt;span class=&#34;number&#34;&gt;0.0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;100.0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;180.0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;说明并比较方法layoutifneededlayoutsubviews-和-setneedslayout&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#说明并比较方法layoutifneededlayoutsubviews-和-setneedslayout&#34;&gt;#&lt;/a&gt; 说明并比较方法：layoutIfNeeded，layoutSubviews 和 setNeedsLayout&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;layoutIfNeeded&lt;/strong&gt; 一旦被调用，主线程会立即强制重新布局，它从当前视图开始，一直到完成所有子视图的布局。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;layoutSubviews&lt;/strong&gt; 用来自定义视图尺寸。它是系统自动调用的，开发者不能手动调用。我们能做的就是重写该方法，让系统调整尺寸时按照我们期望的效果进行布局。这个方法主要用在屏幕旋转、滑动或者触摸界面、修改子视图时被触发。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;setNeedsLayout&lt;/strong&gt; 与 layoutIfNeeded 非常相似，唯一不同就是它不会立即刷新布局，而是在下一个布局周期才会触发刷新。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;说明并比较关键词-safe-area-safearealayoutguide-和-safeareainsets&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#说明并比较关键词-safe-area-safearealayoutguide-和-safeareainsets&#34;&gt;#&lt;/a&gt; 说明并比较关键词： Safe Area, SafeAreaLayoutGuide 和 SafeAreaInsets&lt;/h5&gt;
&lt;p&gt;由于 iPhone X 采用了全新的 “刘海” 设计，所以 iOS11 中引入了安全区域（Safe Area）的概念。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Safe Area 是指 App 合理显示内容的区域&lt;/strong&gt;。它不包括 status bar, navigation bar, tab bar 和 tool bar 等。在 iPhoneX 系列中，一般是指扣除了顶部的 status bar（高度 44 像素）和底部的 home indicator（高度 34 像素）的区域。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SafeAreaLayoutGuide 是指 Safe Area 的区域范围和限制&lt;/strong&gt;。在布局设置中可取其上下左右进行设置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SafeAreaInsets 限定了 Safe Area 区域和整个屏幕之间的布局关系&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;动画&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#动画&#34;&gt;#&lt;/a&gt; 动画&lt;/h4&gt;
&lt;h5 id=&#34;ios-中动画实现方式有几种&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ios-中动画实现方式有几种&#34;&gt;#&lt;/a&gt; iOS 中动画实现方式有几种&lt;/h5&gt;
&lt;p&gt;主要有以下三种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;UIView Animation 可以实现基于 UIView 的简单动画&lt;/strong&gt;。它是 CALayer Animation 的封装。它实现的动画无法回撤、暂定、与手势交互。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CALayer Animation 是在更底层 CALayer 上的动画接口&lt;/strong&gt;。可以实现 UIView Animation 以及更多自定义效果。支持动画的回撤、暂停与手势交互。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UIViewPropertyAnimator 是 iOS10 中引入的处理交互式动画的接口&lt;/strong&gt;。相比 UIView Animation，更加方便，且支持手势交互。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;控制屏幕上小球使其水平右移-200-个-point&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#控制屏幕上小球使其水平右移-200-个-point&#34;&gt;#&lt;/a&gt; 控制屏幕上小球，使其水平右移 200 个 point&lt;/h5&gt;
&lt;p&gt;嗯，，，真的问了这个问题，就要追问更多的细节再去编码。实现方案就是动画位移。&lt;/p&gt;
&lt;h4 id=&#34;多任务开发&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#多任务开发&#34;&gt;#&lt;/a&gt; 多任务开发&lt;/h4&gt;
&lt;h5 id=&#34;在-ios-开发中如何保证-app-的-ui-在-iphone-ipad-以及-ipad-分屏情况下依然适用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#在-ios-开发中如何保证-app-的-ui-在-iphone-ipad-以及-ipad-分屏情况下依然适用&#34;&gt;#&lt;/a&gt; 在 iOS 开发中，如何保证 App 的 UI 在 iPhone、iPad 以及 iPad 分屏情况下依然适用&lt;/h5&gt;
&lt;p&gt;为适应各种机型，苹果公司在 iOS8 中引入了 Adaptive UI 的概念，需注意以下几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;采用 Auto Layout。&lt;/li&gt;
&lt;li&gt;采用 Size Class。&lt;/li&gt;
&lt;li&gt;关注多屏情况。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;如何用-drag-drop-实现图片拖动功能&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#如何用-drag-drop-实现图片拖动功能&#34;&gt;#&lt;/a&gt; 如何用 drag &amp;amp; drop 实现图片拖动功能&lt;/h5&gt;
&lt;p&gt;iOS11 中最新引入的 Drag and Drop 功能。&lt;/p&gt;
&lt;h3 id=&#34;uiscrollview-及其子类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#uiscrollview-及其子类&#34;&gt;#&lt;/a&gt; UIScrollView 及其子类&lt;/h3&gt;
&lt;h4 id=&#34;uiscrollview-及其子类理论面试题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#uiscrollview-及其子类理论面试题&#34;&gt;#&lt;/a&gt; UIScrollView 及其子类理论面试题&lt;/h4&gt;
&lt;h5 id=&#34;说明并比较关键词contentview-contentinset-contentsize-和-contentoffset&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#说明并比较关键词contentview-contentinset-contentsize-和-contentoffset&#34;&gt;#&lt;/a&gt; 说明并比较关键词：contentView, contentInset, contentSize 和 contentOffset&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;UIScrollView 上显示内容的区域被称为 contentView&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;contentInset 是指 contentView 与 UIScrollView 的边界&lt;/strong&gt;。具体属性包括 top、bottom、left 和 right 四个。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;contentSize 值 contentView 的大小&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;contentOffset 是指当前 contentView 浏览位置左上角点的坐标&lt;/strong&gt;。它是相对于整个 UIScrollView 左上角为原点而言的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;说明-uitableviewcell-的重用机制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#说明-uitableviewcell-的重用机制&#34;&gt;#&lt;/a&gt; 说明 UITableViewCell 的重用机制&lt;/h5&gt;
&lt;p&gt;相同类型的 UITableViewCell 标记为相同的 Identifier，然后用 reuseIdentifier 进行构建。不用重复生成新的 Cell。&lt;/p&gt;
&lt;h5 id=&#34;说明并比较协议-uitableviewdatasource-和-uitableviewdelegate&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#说明并比较协议-uitableviewdatasource-和-uitableviewdelegate&#34;&gt;#&lt;/a&gt; 说明并比较协议 UITableViewDataSource 和 UITableviewDelegate&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;UITableViewDataSource 用来管控 UITableView 的实际数据。例如多少行、每行多高等。&lt;/li&gt;
&lt;li&gt;UITableviewDelegate 用来处理 UITableView 的 UI 交互，如设置 header 和 footer、点击、推动、删除等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;说明并比较协议uicollectionviewdatasource-uicollectionviewdelegate-uicollectionviewdelegateflowlayout&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#说明并比较协议uicollectionviewdatasource-uicollectionviewdelegate-uicollectionviewdelegateflowlayout&#34;&gt;#&lt;/a&gt; 说明并比较协议：UICollectionViewDataSource, UICollectionViewDelegate, UICollectionViewDelegateFlowLayout&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;UICollectionViewDataSource 管控 UICollectionView 的实际数据。&lt;/li&gt;
&lt;li&gt;UICollectionViewDelegate 用来处理交互。&lt;/li&gt;
&lt;li&gt;UICollectionViewDelegateFlowLayout 用来处理 UICollectionView 的布局及其行为，如滚动方向。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;uicollectionview-中的-supplementary-views-和-decoration-views-分别指什么&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#uicollectionview-中的-supplementary-views-和-decoration-views-分别指什么&#34;&gt;#&lt;/a&gt; UICollectionView 中的 Supplementary Views 和 Decoration Views 分别指什么&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;Cells，Supplementary Views 和 Decoration Views 共同构成了整个 UICollectionView 的视图&lt;/strong&gt;。 Cells 是最基本的，并且必须由用户实现和配置。而 Supplementary Views 和 Decoration Views 有默认实现，用来美化 UICollectionView。&lt;/p&gt;
&lt;h4 id=&#34;优化进阶&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#优化进阶&#34;&gt;#&lt;/a&gt; 优化进阶&lt;/h4&gt;
&lt;h5 id=&#34;如果一个列表视图滑动很慢那么该怎样优化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#如果一个列表视图滑动很慢那么该怎样优化&#34;&gt;#&lt;/a&gt; 如果一个列表视图滑动很慢，那么该怎样优化&lt;/h5&gt;
&lt;p&gt;遇到此问题，第一步要分析原因。列表视图滑动不流畅，肯定是 UI 或者数据除了问题，可能的原因是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类表渲染时间较长。可能因为某些 UI 控件比较复杂，或者图层过多。&lt;/li&gt;
&lt;li&gt;界面渲染延后。可能是大量的操作或者耗时计算阻塞的主线程。&lt;/li&gt;
&lt;li&gt;数据源问题。可能因为网络请求太慢，不能及时得到响应数据。也有可能需要数据太多，主线程不能及时处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;针对上面三个问题，分别优化：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于第一个问题，首先检查 Cell 是否复用，是否有复杂图层，也可使用惰性加载来推迟创建时间。也可采用 Facebook 推出的 ComponentKit 进行优化。&lt;/li&gt;
&lt;li&gt;对于第二个问题，可采用 GCD 将耗时操作放到子线程处理，并进行缓存。如果 LinkedIn 推出的 LayoutKit 就是很好的例子。&lt;/li&gt;
&lt;li&gt;对于第三个问题，可以缓存后端数据，或者和后端协调优化网络请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于界面渲染和优化，Facebook 和 Pinterest 维护的 ASDK 是目前功能最全、效果最好、使用最广的第三方解决方案。&lt;/p&gt;
&lt;h5 id=&#34;说一说实现预加载的方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#说一说实现预加载的方法&#34;&gt;#&lt;/a&gt; 说一说实现预加载的方法&lt;/h5&gt;
&lt;p&gt;即滑动过程中请求新的数据。简单实现方案如下：&lt;/p&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;scrollViewDidScroll&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;scrollView&lt;/span&gt;: &lt;span class=&#34;type&#34;&gt;UIScrollView&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; current &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; scrollView.contentOffset.y &lt;span class=&#34;operator&#34;&gt;+&lt;/span&gt; scrollView.frame.size.height&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; totol &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; scrollView.contentSize.height&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; ratio &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; current &lt;span class=&#34;operator&#34;&gt;/&lt;/span&gt; totol&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; needRead &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; cellsPerPage &lt;span class=&#34;operator&#34;&gt;*&lt;/span&gt; threshold &lt;span class=&#34;operator&#34;&gt;+&lt;/span&gt; currentPage &lt;span class=&#34;operator&#34;&gt;*&lt;/span&gt; cellPerPage&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; totolCells &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; cellsPerPage &lt;span class=&#34;operator&#34;&gt;*&lt;/span&gt; (currentPage &lt;span class=&#34;operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; newTheshold &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; needRead &lt;span class=&#34;operator&#34;&gt;/&lt;/span&gt; totolCells&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ratio &lt;span class=&#34;operator&#34;&gt;&amp;gt;=&lt;/span&gt; newTheshold &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        currentPage &lt;span class=&#34;operator&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        requestNewPage()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;也可以参考 ASDK 做更进一步的优化。&lt;/p&gt;
&lt;h5 id=&#34;如何用-uicollectionview-实现瀑布流界面&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#如何用-uicollectionview-实现瀑布流界面&#34;&gt;#&lt;/a&gt; 如何用 UICollectionView 实现瀑布流界面&lt;/h5&gt;
&lt;p&gt;创建一个 UICollectionViewlayout 的子类，并对以下四个属性或方法一一设定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;collectionViewContentSize，瀑布流的尺寸变化，必然要重写这个属性。&lt;/li&gt;
&lt;li&gt;prepare ()。该方法发生在 UICollectionView 数据准备好，但界面还未布局之时。在这里进行位置计算。&lt;/li&gt;
&lt;li&gt;layoutAttributesForElements (in:)。prepare () 完成布局后，调用该方法，决定展示哪些 item。&lt;/li&gt;
&lt;li&gt;layoutAttributesForItem (at:)。该方法对每一个 item 设定 layoutAttributes。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实现一个瀑布流需要复杂的计算和测试，这里仅仅是提供思路。&lt;/p&gt;
&lt;h3 id=&#34;网络-推送与数据处理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#网络-推送与数据处理&#34;&gt;#&lt;/a&gt; 网络、推送与数据处理&lt;/h3&gt;
&lt;h4 id=&#34;网络-推送与数据处理相关理论&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#网络-推送与数据处理相关理论&#34;&gt;#&lt;/a&gt; 网络、推送与数据处理相关理论&lt;/h4&gt;
&lt;h5 id=&#34;说一下-http-中-get-和-post-的区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#说一下-http-中-get-和-post-的区别&#34;&gt;#&lt;/a&gt; 说一下 HTTP 中 GET 和 POST 的区别&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;从方向上看，GET 是从服务器获取信息的，POST 是想服务器发送信息的。实质上，他们都能够获取、发送信息。&lt;/li&gt;
&lt;li&gt;从类型看，GET 处理静态和动态内容，POST 只处理动态内容。&lt;/li&gt;
&lt;li&gt;从参数位置看，GET 参数才 URI 里，POST 参数在其包体里。从这个角度来看，POST 比 GET 更安全、隐秘。&lt;/li&gt;
&lt;li&gt;GET 可以被缓存，可以被存储在浏览器的浏览历史里，其内容理论上有长度限制，而 POST 在这三方面恰恰相反。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;PS. 感觉这里说的宽泛而不严谨，关于 HTPP 更多信息，可以参考书籍《图解 HTTP》。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;说一说-session-和-cookie-的概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#说一说-session-和-cookie-的概念&#34;&gt;#&lt;/a&gt; 说一说 Session 和 Cookie 的概念&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Session 是服务器用来认证、追踪用户的数据结构。它通过判断客户端传来的消息确定用户。确定用户的唯一标志就是客户端传来的 Session ID。&lt;/li&gt;
&lt;li&gt;Cookie 是客户端用来保存用户信息的机制。初次会话时，HTTP 协议会在 Cookie 里记录一个 Session ID，之后每次会话都把 Session ID 发给服务器。&lt;/li&gt;
&lt;li&gt;Session 一般用于用户验证。它默认存储在服务器的一个文件里，当然也可以存储在内存、数据库里。&lt;/li&gt;
&lt;li&gt;若客户端禁用了 Cookie，则客户端会用 URL 重写技术，即绘画板时在 URL 的末尾加上 Session ID，并发送给服务器。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;说明并比较网络通信协议ajax-polling-long-polling-websockets-和-server-sent-event&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#说明并比较网络通信协议ajax-polling-long-polling-websockets-和-server-sent-event&#34;&gt;#&lt;/a&gt; 说明并比较网络通信协议：Ajax Polling, Long Polling, WebSockets 和 Server-Sent Event。&lt;/h5&gt;
&lt;p&gt;。。。&lt;/p&gt;
&lt;h5 id=&#34;在一个-https-连接的网站中输入账号和密码并单击登录按钮后到服务器返回这个请求前这期间经历了什么&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#在一个-https-连接的网站中输入账号和密码并单击登录按钮后到服务器返回这个请求前这期间经历了什么&#34;&gt;#&lt;/a&gt; 在一个 HTTPS 连接的网站中，输入账号和密码，并单击登录按钮后，到服务器返回这个请求前，这期间经历了什么&lt;/h5&gt;
&lt;p&gt;具体经历以下 8 步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;客户端打包请求&lt;/strong&gt;。其中包括 URL、端口、账号密码等。&lt;strong&gt;注意&lt;/strong&gt;，HTTPS，即 HTTP + SSL/TLS，在 HTTP 上又加了一层处理加密信息的模板。这个过程相当于客户端请求钥匙。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务端接受请求&lt;/strong&gt;。这个过程中，DNS 把网络地址解析成 IP 地址，在寻找到对应的计算机。&lt;strong&gt;这个过程相当于服务器分析是否要向客户端发送钥匙模板&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务器返回数字证书&lt;/strong&gt;。这个过程相当于服务器想客户端发送钥匙模板。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;客户端生成加密信息&lt;/strong&gt;。此时信息已被加密，这个过程相当客户端生成钥匙并锁上请求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;客户端发送加密信息&lt;/strong&gt;。即客户端发送请求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务器加锁加密信息&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务器向客户端返回信息&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;客户端解锁返回信息&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;ios-网络请求&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ios-网络请求&#34;&gt;#&lt;/a&gt; iOS 网络请求&lt;/h4&gt;
&lt;h5 id=&#34;说明并比较类urlsessiontask-urlsessiondatatask-urlsessionuploadtask-urlsessiondownloadtask&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#说明并比较类urlsessiontask-urlsessiondatatask-urlsessionuploadtask-urlsessiondownloadtask&#34;&gt;#&lt;/a&gt; 说明并比较类：URLSessionTask, URLSessionDataTask, URLSessionUploadTask, URLSessionDownloadTask&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;URLSessionTask&lt;/strong&gt; 是一个抽象类。通过实现它，可以实现网络的任务传输任务。诸如请求、上传、下载任务。它的取消、继续、暂停方法有默认实现。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;URLSessionDataTask&lt;/strong&gt; 负责 HTTP GET 请求，一般用户获取服务器数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;URLSessionUploadTask&lt;/strong&gt; 负责 HTTP POST/PUT 请求，一般用于上传数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;URLSessionDownloadTask&lt;/strong&gt; 负责下载数据，如断点下载功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;什么是-completion-handler&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么是-completion-handler&#34;&gt;#&lt;/a&gt; 什么是 Completion Handler&lt;/h5&gt;
&lt;p&gt;Completion Handler 一般用于处理 API 请求后的返回数据。&lt;/p&gt;
&lt;h4 id=&#34;消息推送&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#消息推送&#34;&gt;#&lt;/a&gt; 消息推送&lt;/h4&gt;
&lt;h5 id=&#34;在-ios-开发中本地消息推送的流程是怎样的&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#在-ios-开发中本地消息推送的流程是怎样的&#34;&gt;#&lt;/a&gt; 在 iOS 开发中，本地消息推送的流程是怎样的&lt;/h5&gt;
&lt;p&gt;UserNotification 框架是针对远程和本队消息的框架，其流程主要有以下 4 步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;注册。通过调用 requestAuthiruzatuion，让用户在 Alert 中进行选择。&lt;/li&gt;
&lt;li&gt;创建。&lt;/li&gt;
&lt;li&gt;推送。&lt;/li&gt;
&lt;li&gt;响应。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;远程推送与本地推送的差异在于第二步，推送信息的创建。&lt;/p&gt;
&lt;h5 id=&#34;说一说-ios-开发中远程推送的原理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#说一说-ios-开发中远程推送的原理&#34;&gt;#&lt;/a&gt; 说一说 iOS 开发中，远程推送的原理&lt;/h5&gt;
&lt;p&gt;这个问题主要是理清 iOS 系统、App、APNs 服务器以及 App 对应的客户端的关系，主要包括以下几方面：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;App 向 iOS 系统申请远程推送消息的权限。这与本地消息推送的注册是一致的。&lt;/li&gt;
&lt;li&gt;iOS 系统想 APNs 服务器请求手机端的 deviceToken，并告诉 App，允许接收推送的通知。&lt;/li&gt;
&lt;li&gt;App 接收到手机端的 deviceToken。&lt;/li&gt;
&lt;li&gt;App 将收到的 deviceToken 传给 App 的服务器端。&lt;/li&gt;
&lt;li&gt;远程消息由 App 对应的服务器端产生吗，它会先经过 APNs 服务器。&lt;/li&gt;
&lt;li&gt;APNs 服务器将远程通知推送给响应的手机。&lt;/li&gt;
&lt;li&gt;根据对应的 deviceToken，通知会推送到指定的手机。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;数据处理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数据处理&#34;&gt;#&lt;/a&gt; 数据处理&lt;/h4&gt;
&lt;h5 id=&#34;在-ios开发中如何实现编码和解码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#在-ios开发中如何实现编码和解码&#34;&gt;#&lt;/a&gt; 在 iOS 开发中，如何实现编码和解码&lt;/h5&gt;
&lt;p&gt;在 Swift4 中，编码和解码引入了 Encodable 和 Decodable 这两个协议，而 Codable 是这两个协议的合集，在 Swift 中，Enum、Struct 和 Class 都支持 Codable。&lt;/p&gt;
&lt;h5 id=&#34;说一说-ios-开发中数据持久化方案&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#说一说-ios-开发中数据持久化方案&#34;&gt;#&lt;/a&gt; 说一说 iOS 开发中数据持久化方案&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Plist。一般用于保存 App 的基本参数。&lt;/li&gt;
&lt;li&gt;Preference。即使用 UserDefaults 来保存，本质是相关数据保存到同一个 plist 文件下。&lt;/li&gt;
&lt;li&gt;NSKeyedArchiver。序列化方案，即归档和解档。&lt;/li&gt;
&lt;li&gt;CoreData。以上三种都是覆盖存储。CoreData 则是数据库存储，此外还有 SQLite3、FMDB、Realm 等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;并发编程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#并发编程&#34;&gt;#&lt;/a&gt; 并发编程&lt;/h3&gt;
&lt;h4 id=&#34;在-ios-开发中并发操作有哪-3-种方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#在-ios-开发中并发操作有哪-3-种方式&#34;&gt;#&lt;/a&gt; 在 iOS 开发中，并发操作有哪 3 种方式&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;NSThread:&lt;/strong&gt; 可以最大限度的掌握每一个线程的生命周期。但需要开发者手段管理以及加锁操作。使用场景较小，基本是在开发底层的开源软件或者测试时调用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GCD(Grand Central Dispatch):&lt;/strong&gt; 苹果公司推荐，为了追求高效处理大量并发数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Operation:&lt;/strong&gt; 与 GCD 类似，但是更加灵活。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;比较关键词-serial-concurrent-sync-async&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#比较关键词-serial-concurrent-sync-async&#34;&gt;#&lt;/a&gt; 比较关键词： Serial、Concurrent、Sync、Async&lt;/h4&gt;
&lt;p&gt;串行、并行、同步、异步，更多详细信息，可参考 &lt;a href=&#34;https://www.jianshu.com/p/ef519348c733&#34;&gt;《Objective-C 高级编程》三篇总结之三：GCD 篇&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;另外，并发编程三大问题、GCD 信号量、栅栏等，都可参考这篇文章。&lt;/p&gt;
</content>
        <category term="面试" />
        <category term="iOS" />
        <updated>2022-09-07T00:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://xxhapril.github.io/2022/09/07/%E3%80%8AiOS%E9%9D%A2%E8%AF%95%E4%B9%8B%E9%81%93%E3%80%8B%E4%B8%A4%E7%AF%87%E6%80%BB%E7%BB%93%E4%B9%8B%E4%BA%8C%EF%BC%9A%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E7%AF%87/</id>
        <title>《iOS面试之道》两篇总结之二：算法基础篇</title>
        <link rel="alternate" href="http://xxhapril.github.io/2022/09/07/%E3%80%8AiOS%E9%9D%A2%E8%AF%95%E4%B9%8B%E9%81%93%E3%80%8B%E4%B8%A4%E7%AF%87%E6%80%BB%E7%BB%93%E4%B9%8B%E4%BA%8C%EF%BC%9A%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
        <content type="html">&lt;p&gt;《iOS 面试之道》是故胤道长和唐巧 2018 年合著的针对面试一些问题的书，买之后虽有翻阅，但是始终未认真通读。现在想把书中对于我来说有价值的知识点，简短的总结一下。这里分两篇来说，这篇主要是介绍一些算法基础。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;&lt;a href=&#34;&#34;&gt;《iOS 面试之道》两篇总结之一：开发技能篇&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;&#34;&gt;《iOS 面试之道》两篇总结之二：算法基础篇&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;基本的数据结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#基本的数据结构&#34;&gt;#&lt;/a&gt; 基本的数据结构&lt;/h2&gt;
&lt;h3 id=&#34;数组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数组&#34;&gt;#&lt;/a&gt; 数组&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ContiguousArray&lt;Element&gt;: 效率最高，元素分配在连续的内存地址上。如果数组元素是值类型，Swift 自动调用这种实现。处理大量元素时，推荐这种方式。&lt;/li&gt;
&lt;li&gt;Array&lt;Element&gt;: 自动桥接到 Objective-C 的 NSArray 上，如果元素时值类型，与 ContiguousArray 性能无差别。&lt;/li&gt;
&lt;li&gt;ArraySlice&lt;Element&gt;: 它不是一个新的数组，而只是一个片段，在内存上与数组享用同一区域。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面用数组实现一个栈操作：&lt;/p&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Stack&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; stack: [&lt;span class=&#34;type&#34;&gt;AnyObject&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; isEmpty: &lt;span class=&#34;type&#34;&gt;Bool&lt;/span&gt; &amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; stack.isEmpty &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; peel: &lt;span class=&#34;type&#34;&gt;AnyObject&lt;/span&gt;? &amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; stack.last &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;init&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        stack &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;type&#34;&gt;AnyObject&lt;/span&gt;]()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;push&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;object&lt;/span&gt;: &lt;span class=&#34;type&#34;&gt;AnyObject&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        stack.append(object)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;pop&lt;/span&gt;() -&amp;gt; &lt;span class=&#34;type&#34;&gt;AnyObject&lt;/span&gt;? &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;!&lt;/span&gt;isEmpty &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; stack.removeLast()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后强调一个操作： &lt;code&gt;reserveCapacity()&lt;/code&gt; 。用于为原数组预留空间，防止数组数组添加或删除元素时反复申请内存空间或创建新数组。再别在数组创建或者  &lt;code&gt;removeAll()&lt;/code&gt;  时，对整段代码起到性能提升的作用。&lt;/p&gt;
&lt;h3 id=&#34;字典和集合&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字典和集合&#34;&gt;#&lt;/a&gt; 字典和集合&lt;/h3&gt;
&lt;p&gt;一般字典和集合的 Key 都要遵循 Hashable 协议，自定义的类型作为 Key 实现 Hashable。这里说下集合的一些特点:&lt;/p&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; primeNums: &lt;span class=&#34;type&#34;&gt;Set&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;13&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; oddNums: &lt;span class=&#34;type&#34;&gt;Set&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/// 交集、并集、差集&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; primeAndOddNum &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; primeNums.intersection(oddNums)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; orNums &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; primeNums&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;orNums.formUnion(oddNums)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; primeNotOddNum &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; primeNums.subtracting(oddNums)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里一个字典的例子非常有意思：&lt;/p&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;* 用字典和高阶函数计算字符串中每个字符出现的频率。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;* 结果为 [&amp;quot;l&amp;quot;: 2, &amp;quot;h&amp;quot;: 1, &amp;quot;o&amp;quot;: 1, &amp;quot;e&amp;quot;: 1]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;*/&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Dictionary&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;.map &amp;#123; (&lt;span class=&#34;variable&#34;&gt;$0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&amp;#125;, uniquingKeysWith: &lt;span class=&#34;operator&#34;&gt;+&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;算法题： 给出一个整型数组和一个目标值，判断数组中是否有两个数之和等于目标值。&lt;/p&gt;
&lt;p&gt;可利用目标减去差值的方式，时间复杂度为 &lt;em&gt;O(n)&lt;/em&gt;：&lt;/p&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;twoNum&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;nums&lt;/span&gt;: [&lt;span class=&#34;type&#34;&gt;Int&lt;/span&gt;], &lt;span class=&#34;keyword&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;target&lt;/span&gt;: &lt;span class=&#34;type&#34;&gt;Int&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;type&#34;&gt;Bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Set&lt;/span&gt;&amp;lt;&lt;span class=&#34;type&#34;&gt;Int&lt;/span&gt;&amp;gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; num &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; nums &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;set&lt;/span&gt;.contains(target &lt;span class=&#34;operator&#34;&gt;-&lt;/span&gt; num) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;set&lt;/span&gt;.insert(num)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果修改这个题：给出一个整型数组有且仅有两个数之和等于目标值，求这两个数在数组中的序号。&lt;/p&gt;
&lt;p&gt;这里使用字典记录序号，时间复杂度依然为  &lt;em&gt;O(n)&lt;/em&gt;：&lt;/p&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;twoNum&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;nums&lt;/span&gt;: [&lt;span class=&#34;type&#34;&gt;Int&lt;/span&gt;], &lt;span class=&#34;keyword&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;target&lt;/span&gt;: &lt;span class=&#34;type&#34;&gt;Int&lt;/span&gt;) -&amp;gt; [&lt;span class=&#34;type&#34;&gt;Int&lt;/span&gt;] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; dic &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;type&#34;&gt;Int&lt;/span&gt;: &lt;span class=&#34;type&#34;&gt;Int&lt;/span&gt;]()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (index, value) &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; nums.enumerated() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; lastIndex &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; dic[target &lt;span class=&#34;operator&#34;&gt;-&lt;/span&gt; value] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; [index, lastIndex]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            dic[value] &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; index&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;字符串&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符串&#34;&gt;#&lt;/a&gt; 字符串&lt;/h3&gt;
&lt;h4 id=&#34;给出一个字符串要求其按照单词顺序进行反转&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#给出一个字符串要求其按照单词顺序进行反转&#34;&gt;#&lt;/a&gt; 给出一个字符串，要求其按照单词顺序进行反转&lt;/h4&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;override&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;viewDidLoad&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;super&lt;/span&gt;.viewDidLoad()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(reverseWords(s: &lt;span class=&#34;string&#34;&gt;&amp;quot;the sky     is      blue&amp;quot;&lt;/span&gt;) &lt;span class=&#34;operator&#34;&gt;??&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;None&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/// 按照单词反转字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;reverseWords&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;s&lt;/span&gt;: &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt;?) -&amp;gt; &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt;? &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;guard&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; s &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; s &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; chars &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; s.map &amp;#123; &lt;span class=&#34;variable&#34;&gt;$0&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    reverse(&lt;span class=&#34;operator&#34;&gt;&amp;amp;&lt;/span&gt;chars, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, chars.count &lt;span class=&#34;operator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(chars)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; start &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;..&amp;lt;&lt;/span&gt; chars.count &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; i &lt;span class=&#34;operator&#34;&gt;==&lt;/span&gt; chars.count &lt;span class=&#34;operator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;||&lt;/span&gt; chars[i &lt;span class=&#34;operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] &lt;span class=&#34;operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            reverse(&lt;span class=&#34;operator&#34;&gt;&amp;amp;&lt;/span&gt;chars, start, i)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            start &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; i &lt;span class=&#34;operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt;(chars)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/// 反转一个字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;reverse&lt;/span&gt;&amp;lt;&lt;span class=&#34;type&#34;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&#34;keyword&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;chars&lt;/span&gt;: &lt;span class=&#34;keyword&#34;&gt;inout&lt;/span&gt; [&lt;span class=&#34;type&#34;&gt;T&lt;/span&gt;], &lt;span class=&#34;keyword&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;start&lt;/span&gt;: &lt;span class=&#34;type&#34;&gt;Int&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;end&lt;/span&gt;: &lt;span class=&#34;type&#34;&gt;Int&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; start &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; start&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; end &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; end&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; start &lt;span class=&#34;operator&#34;&gt;&amp;lt;&lt;/span&gt; end &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;swap&lt;/span&gt;(&lt;span class=&#34;operator&#34;&gt;&amp;amp;&lt;/span&gt;chars, start, end)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        start &lt;span class=&#34;operator&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        end &lt;span class=&#34;operator&#34;&gt;-=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/// 交换两个位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;swap&lt;/span&gt;&amp;lt;&lt;span class=&#34;type&#34;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&#34;keyword&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;chars&lt;/span&gt;: &lt;span class=&#34;keyword&#34;&gt;inout&lt;/span&gt; [&lt;span class=&#34;type&#34;&gt;T&lt;/span&gt;], &lt;span class=&#34;keyword&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;p&lt;/span&gt;: &lt;span class=&#34;type&#34;&gt;Int&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;q&lt;/span&gt;: &lt;span class=&#34;type&#34;&gt;Int&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    (chars[p], chars[q]) &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; (chars[q], chars[p])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;string&#34;&gt;&amp;quot;e&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;u&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;l&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;s&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;i&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;y&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;k&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;s&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;e&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;h&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;t&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Optional&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;blue      is     sky the&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;链表&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#链表&#34;&gt;#&lt;/a&gt; 链表&lt;/h2&gt;
&lt;h3 id=&#34;链表的基本概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#链表的基本概念&#34;&gt;#&lt;/a&gt; 链表的基本概念&lt;/h3&gt;
&lt;p&gt;这里不再赘述链表基本概念，直接实现链表结点：&lt;/p&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/// 链表节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ListNode&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; val: &lt;span class=&#34;type&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; next: &lt;span class=&#34;type&#34;&gt;ListNode&lt;/span&gt;?&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;init&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;val&lt;/span&gt;: &lt;span class=&#34;type&#34;&gt;Int&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;.val &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; val&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;self&lt;/span&gt;.next &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/// 通过节点，实现链表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;List&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; head: &lt;span class=&#34;type&#34;&gt;ListNode&lt;/span&gt;?&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; tail: &lt;span class=&#34;type&#34;&gt;ListNode&lt;/span&gt;?&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 尾插发&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;appendToTail&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;val&lt;/span&gt;: &lt;span class=&#34;type&#34;&gt;Int&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; tail &lt;span class=&#34;operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            tail &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;ListNode&lt;/span&gt;(val)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            head &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; tail&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            tail&lt;span class=&#34;operator&#34;&gt;?&lt;/span&gt;.next &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;ListNode&lt;/span&gt;(val)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            tail &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; tail&lt;span class=&#34;operator&#34;&gt;?&lt;/span&gt;.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 头插法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;appendToHead&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;val&lt;/span&gt;: &lt;span class=&#34;type&#34;&gt;Int&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; head &lt;span class=&#34;operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            head &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;ListNode&lt;/span&gt;(val)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            tail &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; head&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; temp &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;ListNode&lt;/span&gt;(val)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            temp.next &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; head&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            head &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; temp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;dummy-节点和尾插发&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#dummy-节点和尾插发&#34;&gt;#&lt;/a&gt; Dummy 节点和尾插发&lt;/h3&gt;
&lt;p&gt;给出一个链表和一个值 x，要求将链表中所有小于 x 的值放左边，所有大于 x 的放右边，并且原始链表的节点顺序不变。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dummy 节点作用：它的作用就是作为一个虚拟的头结点。因为我们不知道要返回的新链表的节点是哪一个，甚至不知道是否存在。因为 Dummy 节点可以巧妙涵盖各种情况。可以用 dummy.next 方便的返回最终需要的头节点。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;partition&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;head&lt;/span&gt;: &lt;span class=&#34;type&#34;&gt;ListNode&lt;/span&gt;?, &lt;span class=&#34;keyword&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;x&lt;/span&gt;: &lt;span class=&#34;type&#34;&gt;Int&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;type&#34;&gt;ListNode&lt;/span&gt;? &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 引入 Dummy 节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; prevDummy &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;ListNode&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; postDummy &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;ListNode&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; prev &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; prevDummy, post &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; postDummy&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; node &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; head&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 采用尾插发处理左边和右边&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; node &lt;span class=&#34;operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; node&lt;span class=&#34;operator&#34;&gt;!&lt;/span&gt;.val &lt;span class=&#34;operator&#34;&gt;&amp;lt;&lt;/span&gt; x &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            prev.next &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; node&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            prev &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; node&lt;span class=&#34;operator&#34;&gt;!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            post.next &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; node&lt;span class=&#34;operator&#34;&gt;!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            post &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; node&lt;span class=&#34;operator&#34;&gt;!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        node &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; node&lt;span class=&#34;operator&#34;&gt;!&lt;/span&gt;.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 防止构成换&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    post.next &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 左右拼接&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    prev.next &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; postDummy.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; prevDummy.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;快行指针&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#快行指针&#34;&gt;#&lt;/a&gt; 快行指针&lt;/h3&gt;
&lt;p&gt;快行指针用来检测链表是否有环。可以简单理解为：两个指针同时访问链表，但是移动速度不一样，如果存在环，跑的快的总有机会再次遇到跑的慢的。如果跑的快的到头了，还没见到跑的慢的，则不存在环，就好像操场跑步一样。代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;hadCycle&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;head&lt;/span&gt;: &lt;span class=&#34;type&#34;&gt;ListNode&lt;/span&gt;?) -&amp;gt; &lt;span class=&#34;type&#34;&gt;Bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; slow &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; head&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; faster &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; head&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; faster &lt;span class=&#34;operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; faster&lt;span class=&#34;operator&#34;&gt;?&lt;/span&gt;.next &lt;span class=&#34;operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        slow &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; slow&lt;span class=&#34;operator&#34;&gt;?&lt;/span&gt;.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        faster &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; faster&lt;span class=&#34;operator&#34;&gt;?&lt;/span&gt;.next&lt;span class=&#34;operator&#34;&gt;?&lt;/span&gt;.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; slow &lt;span class=&#34;operator&#34;&gt;===&lt;/span&gt; faster &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;注意这里用了三个等号。表示恒等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面使用快行指针解决一个问题：&lt;/p&gt;
&lt;p&gt;删除链表中倒数第 n 个节点，例如：1 -&amp;gt; 2 -&amp;gt; 3 -&amp;gt; 4 -&amp;gt; 5，n = 2，返回 1 -&amp;gt; 2 -&amp;gt; 3 -&amp;gt; 5。给定 n 的长度小于等于链表的长度。&lt;/p&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;removeNthFromEnd&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;head&lt;/span&gt;: &lt;span class=&#34;type&#34;&gt;ListNode&lt;/span&gt;?, &lt;span class=&#34;keyword&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;n&lt;/span&gt;: &lt;span class=&#34;type&#34;&gt;Int&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;type&#34;&gt;ListNode&lt;/span&gt;? &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;guard&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; head &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; head &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; dummy &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;ListNode&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    dummy.next &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; head&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; prev: &lt;span class=&#34;type&#34;&gt;ListNode&lt;/span&gt;? &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; dummy&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; post: &lt;span class=&#34;type&#34;&gt;ListNode&lt;/span&gt;? &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; dummy&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 设置后一个节点的初始位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;..&amp;lt;&lt;/span&gt; n &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; post &lt;span class=&#34;operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        post &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; post&lt;span class=&#34;operator&#34;&gt;!&lt;/span&gt;.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 同时移动前后节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; post &lt;span class=&#34;operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; post&lt;span class=&#34;operator&#34;&gt;?&lt;/span&gt;.next &lt;span class=&#34;operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        prev &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; prev&lt;span class=&#34;operator&#34;&gt;!&lt;/span&gt;.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        post &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; post&lt;span class=&#34;operator&#34;&gt;!&lt;/span&gt;.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 删除节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    prev&lt;span class=&#34;operator&#34;&gt;!&lt;/span&gt;.next &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; prev&lt;span class=&#34;operator&#34;&gt;!&lt;/span&gt;.next&lt;span class=&#34;operator&#34;&gt;!&lt;/span&gt;.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; dummy.next&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;栈和队列&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#栈和队列&#34;&gt;#&lt;/a&gt; 栈和队列&lt;/h2&gt;
&lt;h3 id=&#34;栈的基本概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#栈的基本概念&#34;&gt;#&lt;/a&gt; 栈的基本概念&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;栈是后进先出的结构，即 FILO，first in last out。&lt;/li&gt;
&lt;li&gt;如果 iOS 项目需要添加撤销操作，栈是首选的数据结构。使用数组实现更加方便。&lt;/li&gt;
&lt;li&gt;无论面试还是写 App。主要关注栈的几个基本操作：push，pop，isEmpty，peek（栈顶元素），和 size。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面定义一个栈：&lt;/p&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;protocol&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Stack&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/// 持有的元素类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;associatedtype&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Element&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/// 是否为空&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; isEmpty: &lt;span class=&#34;type&#34;&gt;Bool&lt;/span&gt; &amp;#123; &lt;span class=&#34;keyword&#34;&gt;get&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/// 栈的大小&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; size: &lt;span class=&#34;type&#34;&gt;Int&lt;/span&gt; &amp;#123; &lt;span class=&#34;keyword&#34;&gt;get&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/// 栈顶元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; peek: &lt;span class=&#34;type&#34;&gt;Element&lt;/span&gt;? &amp;#123; &lt;span class=&#34;keyword&#34;&gt;get&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;///进栈&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;mutating&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;push&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;newElement&lt;/span&gt;: &lt;span class=&#34;type&#34;&gt;Element&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/// 出栈&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;mutating&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;pop&lt;/span&gt;() -&amp;gt; &lt;span class=&#34;type&#34;&gt;Element&lt;/span&gt;?&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;IntergerStack&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Stack&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;typealias&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Element&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; isEmpty: &lt;span class=&#34;type&#34;&gt;Bool&lt;/span&gt; &amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; stacks.isEmpty &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; size: &lt;span class=&#34;type&#34;&gt;Int&lt;/span&gt; &amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; stacks.count &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; peek: &lt;span class=&#34;type&#34;&gt;Int&lt;/span&gt;? &amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; stacks.last &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; stacks &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;type&#34;&gt;Element&lt;/span&gt;]()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;mutating&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;push&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;newElement&lt;/span&gt;: &lt;span class=&#34;type&#34;&gt;Int&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        stacks.append(newElement)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;mutating&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;pop&lt;/span&gt;() -&amp;gt; &lt;span class=&#34;type&#34;&gt;Int&lt;/span&gt;? &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; stacks.popLast()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;队列的基本概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#队列的基本概念&#34;&gt;#&lt;/a&gt; 队列的基本概念&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;队列是先进先出的结构，即 FIFO，first in first out。&lt;/li&gt;
&lt;li&gt;iOS 开发中的多线程 GCD 以及 NSOperation 都是基于队列实现的。&lt;/li&gt;
&lt;li&gt;关于队列只需要关注 enqueue、dequeue、isEmpty、peek 和 size 等操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面定义一个队列：&lt;/p&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;protocol&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Queue&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/// 持有的元素类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;associatedtype&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Element&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/// 是否为空&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; isEmpty: &lt;span class=&#34;type&#34;&gt;Bool&lt;/span&gt; &amp;#123; &lt;span class=&#34;keyword&#34;&gt;get&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/// 队列的大小&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; size: &lt;span class=&#34;type&#34;&gt;Int&lt;/span&gt; &amp;#123; &lt;span class=&#34;keyword&#34;&gt;get&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/// 队首元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; peek: &lt;span class=&#34;type&#34;&gt;Element&lt;/span&gt;? &amp;#123; &lt;span class=&#34;keyword&#34;&gt;get&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/// 入队&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;mutating&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;enqueue&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;newElement&lt;/span&gt;: &lt;span class=&#34;type&#34;&gt;Element&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/// 出队&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;mutating&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;dequeue&lt;/span&gt;() -&amp;gt; &lt;span class=&#34;type&#34;&gt;Element&lt;/span&gt;?&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;IntegerQueue&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Queue&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;typealias&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Element&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; isEmpty: &lt;span class=&#34;type&#34;&gt;Bool&lt;/span&gt; &amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; left.isEmpty &lt;span class=&#34;operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; right.isEmpty &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; size: &lt;span class=&#34;type&#34;&gt;Int&lt;/span&gt; &amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; left.count &lt;span class=&#34;operator&#34;&gt;+&lt;/span&gt; right.count &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; peek: &lt;span class=&#34;type&#34;&gt;Int&lt;/span&gt;? &amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; left.isEmpty &lt;span class=&#34;operator&#34;&gt;?&lt;/span&gt; right.first : left.last &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; left &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;type&#34;&gt;Element&lt;/span&gt;]()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; right &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;type&#34;&gt;Element&lt;/span&gt;]()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;mutating&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;enqueue&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;newElement&lt;/span&gt;: &lt;span class=&#34;type&#34;&gt;Int&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        right.append(newElement)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;mutating&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;dequeue&lt;/span&gt;() -&amp;gt; &lt;span class=&#34;type&#34;&gt;Int&lt;/span&gt;? &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; left.isEmpty &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            left &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; right.reversed()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            right.removeAll()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; left.popLast()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;栈和队列实战面试题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#栈和队列实战面试题&#34;&gt;#&lt;/a&gt; 栈和队列实战面试题&lt;/h3&gt;
&lt;p&gt;给出一个文件的绝对路径，要求将其简化。如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;路径是 “/home/”，简化后为 “/home”。&lt;/li&gt;
&lt;li&gt;路径是 “/a/./…/…/c”，简化后为 “/c”。&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据常识，有以下规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“.” 代表当前路径。比如 “/a/.” 实际上就是 “/a”，无论输入多少个 “.”(除了 2 个)，都返回当前目录。&lt;/li&gt;
&lt;li&gt;“…” 代表上一级目录，比如 “a/b/…” 实际就是 “/a”。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实现代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight swift&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;simplifyPath&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;path&lt;/span&gt;: &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 用数组来实现栈的功能&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; pathStack &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;type&#34;&gt;String&lt;/span&gt;]()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 拆分原路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; paths &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; path.components(separatedBy: &lt;span class=&#34;string&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; path &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; paths &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;path = &lt;span class=&#34;subst&#34;&gt;\(path)&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;guard&lt;/span&gt; path &lt;span class=&#34;operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 对 .. 使用 pop 操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; path &lt;span class=&#34;operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;..&amp;quot;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; pathStack.count &lt;span class=&#34;operator&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                pathStack.removeLast()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// 数组为空，上来就是 .. 则不操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; path &lt;span class=&#34;operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            pathStack.append(path)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 空路径，不用处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;stacks = &lt;span class=&#34;subst&#34;&gt;\(pathStack)&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/// 将栈中的内容转化为优化后的新路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; res &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; pathStack.reduce(&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;) &amp;#123; totol, dir &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;&lt;span class=&#34;subst&#34;&gt;\(totol)&lt;/span&gt;/&lt;span class=&#34;subst&#34;&gt;\(dir)&lt;/span&gt;&amp;quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 注意空路径的结果是 /&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; res.isEmpty &lt;span class=&#34;operator&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt; : res&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;二叉树&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二叉树&#34;&gt;#&lt;/a&gt; 二叉树&lt;/h2&gt;
</content>
        <category term="面试" />
        <category term="iOS" />
        <updated>2022-09-07T00:00:00.000Z</updated>
    </entry>
</feed>
